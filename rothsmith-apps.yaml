AWSTemplateFormatVersion: "2010-09-09"
Description: Rothsmith Applications
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Rothsmith application configuration parameters
      Parameters:
      - VPCStack
      - S3Bucket
    ParameterLabels:
      VPCStack:
        default: Enter the stack name used to create the VPC.  
      S3Bucket:
        default: Enter S3 bucket name that stores the CloudFormation templates
Parameters:
  VPCStack:
    Type: String
    Default: 'ROTHSMITH-VPC'
    Description: The VPC stack to obtain exported values from
  S3Bucket:
    Type: String
    Default: rothsmith-cloudformation
    Description: The S3 bucket containing CloudFormation templates
Mappings:
  ServerMap: 
    webProxy: 
      ami: "ami-0151f162d1ff20101"
      port: '80'
      scaling: "1,1,1"
      type: "t2.micro"
      name: Apache Web Server
      owner: drothauser@yahoo.com
      description: DMZ Apache Web Server
      svcCode: web
      tier: public
    tomcat: 
      ami: "ami-07c8b576e965e389e"      
      port: '8080'
      scaling: "1,3,2"
      type: "t2.micro"
      name: Tomcat Server
      owner: drothauser@yahoo.com
      description: Tomcat Server
      svcCode: tomcat
      tire: private
    nexus: 
      ami: "ami-0b6f97817bd60cd5c"      
      port: '8081'
      scaling: "1,1,1"
      type: "t2.micro"
      name: Nexus Server
      owner: drothauser@yahoo.com
      description: Nexus Repository Manager
      svcCode: nexus
      tier: private
    jenkins: 
      ami: "ami-0f0243a84e786b72c"      
      port: '80'
      scaling: "1,1,1"
      type: "t2.micro"
      name: Jenkins Server
      owner: drothauser@yahoo.com
      description: Jenkins Continuous Integration
      svcCode: jenkins
      tier: private
Resources:
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  S3RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3access
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: s3:*
          Resource: "*"
      Roles:
      - Ref: S3AccessRole
  S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3AccessRole
  Tomcat:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://s3.amazonaws.com/'
          - !Ref S3Bucket
          - '/rothsmith-service.yaml'
      Parameters:
        ElbSNs: !Join
          - ','
          - - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PrivateSubnet1'
            - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PrivateSubnet2'
        ElbSGs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnetInstanceSG'
        Ec2SNs: !Join
          - ','
          - - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PrivateSubnet1'
            - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PrivateSubnet2'
        Ec2SGs:  
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnetInstanceSG'
        AmiId: !FindInMap [ServerMap, tomcat, ami]
        Ec2Port: !FindInMap [ServerMap, tomcat, port]
        Ec2Role: !Ref S3InstanceProfile
        Ec2Type: !FindInMap [ServerMap, tomcat, type]
        Ec2Name: !FindInMap [ServerMap, tomcat, name]
        Ec2Owner: !FindInMap [ServerMap, tomcat, owner]
        Ec2Desc: !FindInMap [ServerMap, tomcat, description]        
        Facing: private
        Scaling: !FindInMap [ServerMap, tomcat, scaling]  
        SvcCode: !FindInMap [ServerMap, tomcat, svcCode]  
        ElbDnsKVPs: " " # Only needed for public web proxy tier
  Nexus:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://s3.amazonaws.com/'
          - !Ref S3Bucket
          - '/rothsmith-service.yaml'
      Parameters:
        ElbSNs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnet1'
        ElbSGs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnetInstanceSG'
        Ec2SNs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnet1'
        Ec2SGs:  
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PrivateSubnetInstanceSG'
        AmiId: !FindInMap [ServerMap, nexus, ami]
        Ec2Port: !FindInMap [ServerMap, nexus, port]
        Ec2Role: !Ref S3InstanceProfile
        Ec2Type: !FindInMap [ServerMap, nexus, type]
        Ec2Name: !FindInMap [ServerMap, nexus, name]
        Ec2Owner: !FindInMap [ServerMap, nexus, owner]
        Ec2Desc: !FindInMap [ServerMap, nexus, description]        
        Facing: private
        Scaling: !FindInMap [ServerMap, nexus, scaling]  
        SvcCode: !FindInMap [ServerMap, nexus, svcCode]  
        ElbDnsKVPs: " " # Only needed for webProxy web proxy tier
  WebProxy:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://s3.amazonaws.com/'
          - !Ref S3Bucket
          - '/rothsmith-service.yaml'
      Parameters:
        ElbSNs: !Join
          - ','
          - - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PublicSubnet1'
            - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PublicSubnet2'
        ElbSGs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PublicInstanceSG'
        Ec2SNs: !Join
          - ','
          - - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PublicSubnet1'
            - 'Fn::ImportValue': 
                !Sub '${VPCStack}-PublicSubnet2'
        Ec2SGs: 
          'Fn::ImportValue': 
            !Sub '${VPCStack}-PublicInstanceSG'
        AmiId: !FindInMap [ServerMap, webProxy, ami]
        Ec2Port: !FindInMap [ServerMap, webProxy, port]
        Ec2Role: !Ref S3InstanceProfile
        Ec2Type: !FindInMap [ServerMap, webProxy, type]
        Ec2Name: !FindInMap [ServerMap, webProxy, name]
        Ec2Owner: !FindInMap [ServerMap, webProxy, owner]
        Ec2Desc: !FindInMap [ServerMap, webProxy, description]        
        Facing: public
        Scaling: !FindInMap [ServerMap, webProxy, scaling] 
        SvcCode: !FindInMap [ServerMap, webProxy, svcCode]        
        ElbDnsKVPs: !Join [" ", [!GetAtt [Tomcat, Outputs.ElbDnsKVP], !GetAtt [Nexus, Outputs.ElbDnsKVP]]]
Outputs:
  WebProxyELB:
    Description: Web Proxy URL
    Value: !Join ['', ['http://', !GetAtt [WebProxy, Outputs.ElbDnsName]]]