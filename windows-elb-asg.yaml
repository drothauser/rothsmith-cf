AWSTemplateFormatVersion: "2010-09-09"
Description: DMZ ELB
Parameters:
  ELBSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: subnet-4630ea22
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC) for your ELB
  ELBSecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Default: sg-b5dc32d1
    Description: The list of Security Groups used by your ELB
  Ec2Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: subnet-9c37edf8
    Description: EC2 Instance Subnets
  Ec2SecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Default: sg-b5dc32d1
    Description: Security Groups for EC2 instance 
  AmiId:
    Type: String
    Default: ami-69099208
    Description: Amazon Machine Image ID
  EC2KeyPair: 
    Type: String
    Description: Provides the name of the Amazon EC2 key pair
  EC2Profile: 
    Type: String
    Default: DevOps
    Description: The profile/role for this EC2 instance
Resources:
  DmzELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:      
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '10'
        Target: HTTP:80/
        Timeout: '5'
        UnhealthyThreshold: '5'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      Scheme: internal
      #Scheme: internet-facing
      SecurityGroups: !Ref ELBSecurityGroups
      Subnets: !Ref ELBSubnets
      Tags:
      - Key: Name
        Value: DMZ ELB
  DmzLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref EC2Profile
      InstanceType: t2.micro
      ImageId: !Ref AmiId
      KeyName: !Ref EC2KeyPair
      SecurityGroups: !Ref Ec2SecurityGroups
      UserData:
        "Fn::Base64":
          !Sub |
          <powershell>
          ### Set Variable ###

          $NCCT_Software_Bucket = "ncct-software";
          $AWSCLI_Key = "AWSCLI64PY3.msi"

          $CIS_Directory = "c:\cis";
          $Software_Directory = "c:\cis\EC2-Software";
          $S3BucketName = "cisgov-ec2-software";
          $S3KeyPrefixDirectory ="EC2-Software";
          $SetRegion ="us-gov-west-1";
          $SetLocation_Mcafee ="c:\cis\EC2-Software\McAfee";
          $SetLocation_Splunk ="c:\cis\EC2-Software\Splunk";
          $SetLocation_Nexpose = "C:\cis\EC2-Software\Nexpose\nexpose_agent_windows";
          $SetLocation_wsus = "c:\cis\EC2-Software\WSUS";

          function Invoke-Functions
          {
              Install-CLI
              Copy-File
              Install-Mcafee
              Install-SplunkUF
              Install-Nexpose
              set-Registry
              clean-up
          }

          function Install-CLI
          {
              read-s3object `
                  -BucketName $NCCT_Software_Bucket `
                  -Key $AWSCLI_Key `
                  -File $CIS_Directory\$AWSCLI_Key `
                  -Region $SetRegion

              start-process $CIS_Directory\$AWSCLI_Key /qn -Wait
              setx PATH "$env:Path;C:\PROGRA~1\Amazon\AWSCLI\bin"
              setx AWS_DEFAULT_REGION us-gov-west-1
              
          }

          function Copy-File
          {
              mkdir $CIS_Directory
              #set-location $CIS_Directory 

              read-s3object `
                  -BucketName $S3BucketName `
                  -KeyPrefix $S3KeyPrefixDirectory `
                  -Folder $CIS_Directory\$S3KeyPrefixDirectory `
                  -Region $SetRegion
          }

          function Install-Mcafee
          {
              set-location $SetLocation_Mcafee
              start-process "FramePkg_WIN10.exe" -ArgumentList "/Install=Agent /Silent" -wait
          }


          function Install-SplunkUF
          {
              set-location $SetLocation_Splunk
              start-process -filepath "msiexec.exe" -ArgumentList "-i splunkforwarder-6.6.3-e21ee54bc796-x64-release.msi DEPLOYMENT_SERVER=10.205.17.10:8089 AGREETOLICENSE=yes /quiet /L*v splunk_logfile.txt " -Wait 
          }

          function Install-Nexpose
          {
              set-location $SetLocation_Nexpose
              #expand-archive 'nexpose_agent_windows.zip' -DestinationPath .\ 
              start-process -filepath "msiexec.exe" -ArgumentList "/i agentInstaller-x86_64.msi /quiet /qn " -Wait

          }

          function set-Registry
          {
            set-location $SetLocation_Wsus
            start-process -filepath "regedit.exe" -ArgumentList "/s wsus.reg" -Wait
            # New-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate -Name WUServer -value http://10.205.17.12:8530
            # New-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate -Name WUStatusServer -value http://10.205.17.12:8530
            # Set-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU -Name NoAutoUpdate -value 00000000
            # Set-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU -Name UseWUServer -value 00000001

          }

          function clean-up
          {
              Remove-Item $Software_Directory -Recurse -Force
          }


          Invoke-Functions

          </powershell>
  DmzASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref DmzLaunchConfiguration
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - Ref: DmzELB
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier: !Ref Ec2Subnets
      #HealthCheckType: "ELB"
      HealthCheckType: "EC2"
      Tags:
        - Key: Name
          Value: DMZ AutoScaling Group
          PropagateAtLaunch: "true"

Outputs:
  URL:
    Description: URL of the sample website
    Value: !Join ['', ['http://', !GetAtt [DmzELB, DNSName]]]