AWSTemplateFormatVersion: "2010-09-09"
Description: "Create ECS cluster"

Parameters:

  AmiId:
    Type: String
    Description: "Amazon Machine Image ID"
  
  ClusterName:
    Type: String
    Description: "Rothsmith ECS Cluster for learning"

  InstanceType:
    Type: String
    Description: The EC2 instance type
    Default: "t2.micro"

  EC2KeyPair: 
    Type: String
    Description: "Provides the name of the Amazon EC2 key pair"
    Default: "RothsmithKeyPair"

  Owner:
    Type: String
    Description: "Owner/Progenitor of the stack"
    Default: "drothauser"   

  Scaling:
    Type: CommaDelimitedList
    Description: "Comma separted list of ASG dimensions: min, max, desired"
    Default: "1,2,1"

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: "Subnets from which to launch the ECS instances from"

  SecurityGroups:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: "Security Groups for ECS instances"

  VpcId:
    Type: String
    Description: "The vpc to launch the service"
    Default: vpc-ID

Resources:
  IAMInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: The ECS Instance Role
      RoleName: ecsInstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Tags: 
        - 
          Key: "Environment"
          Value: "dev"
        - 
          Key: "createdBy"
          Value: !Ref Owner
        - 
          Key: "Name"
          Value: "ecsInstanceRole"

  IAMInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
          InstanceProfileName: ecsInstanceRole
          Roles: 
            - !Ref IAMInstanceRole

  ECSSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security Group to control access to the ECS cluster"
        GroupName: "test-ECS-SG"
        VpcId: !Ref VpcId
        SecurityGroupIngress: 
          - 
            CidrIp: 0.0.0.0/0
            FromPort: 80
            IpProtocol: "tcp"
            ToPort: 80
          - 
            CidrIp: 0.0.0.0/0
            FromPort: 443
            IpProtocol: "tcp"
            ToPort: 443 
        Tags: 
          - 
            Key: "Name"
            Value: !Sub ${ClusterName}-SG
          - 
            Key: "CreatedBy"
            Value: !Ref Owner
          - 
            Key: "Environment"
            Value: "dev"        

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags: 
        - 
          Key: "Name"
          Value: !Ref ClusterName
        - 
          Key: "CreatedBy"
          Value: !Ref Owner
        - 
          Key: "Environment"
          Value: "dev"

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Select ['0', !Ref Scaling]
      MaxSize: !Select ['1', !Ref Scaling]
      DesiredCapacity: !Select ['2', !Ref Scaling]
      HealthCheckGracePeriod: 300
      Tags: 
        - 
          Key: "Name"
          Value: !Sub ${ClusterName}-ASG
          PropagateAtLaunch: true
        - 
          Key: "CreatedBy"
          Value: "Douglas Rothauser"
          PropagateAtLaunch: true
        - 
          Key: "Environment"
          Value: "dev"
          PropagateAtLaunch: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmiId
      #SecurityGroups: 
      #  - !Ref ECSSecurityGroup
      SecurityGroups: !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMInstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;
      BlockDeviceMappings: 
      - 
        DeviceName: "/dev/xvda"
        Ebs: 
          Encrypted: false
          VolumeSize: 40
          VolumeType: "gp2"
          DeleteOnTermination: true          
          
Outputs:
  IAMProfile:
    Description: "The created EC2 Instance Role"
    Value: !Ref IAMInstanceProfile

  AutoScalingGroup:
    Description: "The ECS Autoscaling Group"
    Value: !Ref ECSAutoScalingGroup    

  ECS:
    Description: "The created ECS Cluster"
    Value: !Ref ECSCluster